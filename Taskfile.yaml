---
version: 3

vars:
  limit: '{{ .limit | default "all" }}'

tasks:
  pre-checks:
    desc: Check the environment before running
    internal: true
    silent: true
    run: once
    cmds:
      - cmd: |-
          test -x "$(which python 2>/dev/null)" \
            || (echo "Cannot find 'python'. Please install before trying again."; exit 1)
      - cmd: |-
          test -x "$(which pip 2>/dev/null)" \
            || (echo "Cannot find 'pip'. Please install before trying again."; exit 1)
      - cmd: |-
          test -x "$(which pre-commit 2>/dev/null)" \
            || (echo "Cannot find 'pre-commit'. Please install before trying again."; exit 1)
      - cmd: |-
          test -x "$(which ansible 2>/dev/null)" \
            || (echo "Cannot find 'ansible'. Please install before trying again."; exit 1)
      - cmd: |-
          test -x "$(which ansible-playbook 2>/dev/null)" \
            || (echo "Cannot find 'ansible-playbook'. Please install before trying again."; exit 1)
      - cmd: |-
          test -x "$(which sshpass 2>/dev/null)" \
            || (echo "Cannot find 'sshpass'. Please install before trying again."; exit 1)
    status:
      # Setting this file will bypass pre-checks (only use if you are sure)
      - test -f .skip-pre-checks

  deps:
    desc: Install the required dependencies for the repository
    cmds:
      - task: pre-commit

  pre-commit:
    desc: Add the `pre-commit` hook to this repository
    deps:
      - task: pre-checks
    cmds:
      - cmd: pre-commit install
    generates:
      - .git/hooks/pre-commit

  rename:
    desc: Find and rename all .yml files to .yaml
    sources:
      - "plays/*.yml"
      - "plays/host_vars/*.yml"
      - "plays/group_vars/*.yml"
      - "roles/*/*/*.yml"
    silent: true
    cmds:
      - cmd: |-
          find -type f -iname '*.yml' | while read file
          do
            echo "${file#\./} -> $(basename $file .yml).yaml"
            git mv -f $file ${file%.yml}.yaml 2>/dev/null \
             || mv -f $file ${file%.yml}.yaml
          done

  lint:
    desc: Run linting tools against the Ansible files
    summary: |
      Run linting tools against the Ansible files inside this repository for
      validity and correctness.
    run: once
    deps:
      - task: pre-checks
      - task: rename
    sources:
      - ".yamllint.yaml"
      - "plays/*.yaml"
      - "plays/host_vars/*.yaml"
      - "plays/group_vars/*.yaml"
      - "roles/*/*/*.yaml"
    cmds:
      - cmd: yamllint --config-file .yamllint.yaml plays/ roles/
      - cmd: ansible-lint -c .config/ansible-lint.yaml

  ping:
    desc: Attempt to ping all nodes through Ansible
    silent: true
    cmds:
      - cmd: |-
          echo -e "Keys:\n" \
            "  \033[32m   OK       \033[34m   DNS\n" \
            "  \033[33m   No Route \033[33m   Timeout\n" \
            "  \033[31m   Refused) \033[31m   Denied" \
            "\033[0m"
          echo
          echo "Pinging all known hosts in the inventory to test for access..."
      - cmd: |-
          ansible \
            --inventory inventory.yaml \
            --forks 75 \
            --ask-become-pass \
            --module-name ansible.builtin.ping \
            --one-line {{ .limit }} \
          | awk '
              /SUCCESS/                    { printf "\033[32m   %s\033[0m\n", $1 }
              /Could not resolve hostname/ { printf "\033[34m   %s\033[0m\n", $1 }
              /No route to host/           { printf "\033[33m   %s\033[0m\n", $1 }
              /Connection refused/         { printf "\033[31m   %s\033[0m\n", $1 }
              /Connection timed out/       { printf "\033[33m   %s\033[0m\n", $1 }
              /Permanently added/          { node=$1 }
              /Permission denied/          { printf "\033[31m   %s\033[0m\n", node }
          '

  bootstrap:
    desc: Bootstrap new servers using the bootstrap Ansible Play
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/bootstrap.yaml
      - cmd: |-
          ansible-playbook \
            --user root \
            --ask-pass plays/bootstrap.yaml \
            --extra-vars bootstrap_chroot_dir=/mnt \
            --force-handlers \
            --limit {{ .limit }} \
            --forks 10
      # Remove any cached facts after running a bootstrap as the configuration
      # of the host will change significantly, and a baseline needs a refresh
      - cmd: rm -rf .cache

  update:
    desc: Update the pacman package databases on systems
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/update.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/update.yaml \
            --force-handlers \
            --limit {{ .limit }} \
            --forks 10

  upgrade:
    desc: Update and upgrade the packages on systems
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/upgrade.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/upgrade.yaml \
            --force-handlers \
            --limit {{ .limit }} \
            --forks 10

  reboot:
    desc: Update and upgrade the packages on systems
    silent: true
    cmds:
      - cmd: |-
          echo "This command will initiate a sequential reboot of the following hosts:"
          ansible --inventory inventory.yaml --list-hosts {{ .limit }} | grep -v '\s\+hosts' | sort
          read -p "Are you sure? (y/n) " -r
          echo # Force a new line
          if [[ ! ${REPLY} =~ ^[Yy] ]]; then
            exit 1
          fi
      - cmd: |-
          ansible \
            --inventory inventory.yaml \
            --forks 1 \
            --ask-become-pass \
            --module-name ansible.builtin.reboot \
            --one-line {{ .limit }}

  baseline:
    desc: Baseline servers using the baseline Ansible Play
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/baseline.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/baseline.yaml \
            --force-handlers \
            --limit {{ .limit }} \
            --forks 10

  users:
    desc: Update the users and sudo configuration on servers using the users Ansible Play
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/users.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/users.yaml \
            --limit {{ .limit }} \
            --forks 10

  libvirtd:
    desc: Configure libvirtd and deploy Virtual Machines
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/libvirtd.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/libvirtd.yaml \
            --limit {{ .limit }} \
            --forks 10

  kubernetes:
    desc: Deploy configurations for Kubernetes clusters
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/kubernetes.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/kubernetes.yaml \
            --limit {{ .limit }} \
            --forks 3

  cache:
    desc: Deploy configurations for caching proxy
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/cache.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/cache.yaml \
            --limit {{ .limit }} \
            --forks 3

  load-balancers:
    desc: Deploy the highly-avilable load-balancers for internal load balancing
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/load-balancers.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/load-balancers.yaml \
            --limit {{ .limit }} \
            --forks 10

  netdata:
    desc: Deploy the Netdata configurations for parents and children
    silent: true
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/netdata.yaml
      - cmd: |-
          ansible-playbook \
            --ask-become-pass plays/netdata.yaml \
            --limit {{ .limit }} \
            --forks 5

  vault:
    desc: Deploy the Vault Cluster for an environment (services by default)
    summary: |
      Deploy the Vault Cluster for a specified environment (services by default)
      using the vault Ansible Playbook, which will configure Vault itself, as
      well as the local web-server, load balancing, and Cloudflare tunnels.

      Set the following as overrides on the command-line:

      - To change the environment being deployed:
          environment=(services|development|production)
      - To change the hosts that will be configured by the Playbook:
          limit=((hostname|groupname):...)

      $ task vault environment=production limit=vault-01.p.cym-south-1.kub3.uk

      The playbook will operate on one server at a time, facilitating a rolling
      deployment of configuration changes, ensuring that only one server is
      restarted at a time, if required.
    vars:
      environment: '{{ .environment | default "services" }}'
    env:
      # Enable the retry file in Ansible, which will report on which hosts have
      # failed in a particular run of a playbook, allowing the play to be re-run
      # for those hosts until they all complete successfully
      ANSIBLE_RETRY_FILES_ENABLED: "True"
    silent: false
    cmds:
      - cmd: |-
          ansible-playbook \
            --syntax-check plays/vault.yaml
      - defer: |-
          rm plays/vault.retry
      # Pre-populate the retry file with the required targets from the limit
      # variable (by default "all") to simplify the while loop below
      - cmd: |-
          echo "{{ .limit }}" > "plays/vault.retry"
      - cmd: |-
          while [[ -s "plays/vault.retry" ]]
          do
            ansible-playbook \
              --ask-become-pass plays/vault.yaml \
              --extra-vars vault_environment={{ .environment }} \
              --limit "@plays/vault.retry" \
              --forks 1
            [[ "${?}" -eq 0 || "${?}" -eq 143 ]] && break
          done

  clean:
    desc: Clean up the temporary files from the repository
    summary: |
      Remove any generated configuration files and temporary files from the repository.
    run: once
    silent: true
    cmds:
      - cmd: rm -rf .cache
      - cmd: rm -rf .task
