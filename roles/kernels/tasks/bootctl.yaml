---
# bootctl tasks for kernels

- name: Enable systemd-boot-update service for automated bootctl updates
  ansible.builtin.systemd_service:
    name: systemd-boot-update.service
    daemon_reload: false
    enabled: true
  # Only allow a handler to run when we're not inside a chroot environment
  when: not bootstrap_mount_base | default('') | length
  tags:
    - kernel
    - systmed-boot
    - service

- name: Configure systemd-boot loader directories
  ansible.builtin.file:
    path: "{{ bootstrap_mount_base | default('') }}/efi/{{ directory }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
    state: directory
  loop:
    - loader
    - loader/entries
    - EFI
    - EFI/BOOT
  loop_control:
    label: "/efi/{{ directory }}"
    loop_var: directory
  tags:
    - kernel
    - systmed-boot
    - configuration

- name: Install the systemd-boot bootloader in the chroot
  ansible.builtin.command: # noqa no-changed-when
    cmd: |-
      /usr/bin/arch-chroot {{ bootstrap_mount_base | default('') }} /usr/bin/fish -c 'bootctl install --esp-path=/efi'
  when: |-
    not ansible_check_mode and
    bootstrap_mount_base | default('') | length
  tags:
    - kernel
    - systemd-boot
    - configuration

- name: Install the systemd-boot bootloader locally
  ansible.builtin.command: # noqa no-changed-when
    cmd: bootctl install
    creates: "{{ bootstrap_mount_base | default('') }}/efi/EFI/BOOT/BOOTX64.EFI"
  when: |-
    not ansible_check_mode and
    not bootstrap_mount_base | default('') | length
  tags:
    - kernel
    - systmed-boot
    - configuration

- name: Configure loader.conf for systemd-boot
  ansible.builtin.template:
    src: loader.conf.jinja
    dest: "{{ bootstrap_mount_base | default('') }}/efi/loader/loader.conf"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  tags:
    - kernel
    - systemd-boot
    - configuration
