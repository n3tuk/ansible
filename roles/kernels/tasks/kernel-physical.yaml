---
# physical machine kernel tasks for kernels

- name: Sign locally the kernel {{ kernel }}
  # This handler is building boot files specifically inside non-chroot'd environments
  ansible.builtin.command: # noqa no-changed-when
    cmd: sbctl sign -s /efi/EFI/Linux/{{ kernel }}.efi
  when: |-
    not ansible_check_mode and
    not bootstrap_mount_base | default('') | length and
    kernels_secure_boot_sign
  tags:
    - kernel
    - sbctl
    - configuration

- name: Sign inside the chroot the kernel {{ kernel }}
  ansible.builtin.command: # noqa no-changed-when
    cmd: |-
      /usr/bin/arch-chroot {{ bootstrap_mount_base | default('') }} /usr/bin/fish -c 'sbctl sign -s /efi/EFI/Linux/{{ kernel }}.efi'
  when: |-
    not ansible_check_mode and
    bootstrap_mount_base | default('') | length and
    kernels_secure_boot_sign
  tags:
    - kernel
    - sbctl
    - configuration

- name: Check the UEFI entry for the kernel {{ kernel }}
  ansible.builtin.shell: # noqa no-changed-when
    cmd: |-
      set -o pipefail
      efibootmgr \
        | grep -c '{{ kernel }}.efi' \
      || true
  # This can be safely run in --check mode
  check_mode: false
  register: check_kernel
  tags:
    - kernel
    - efibootmgr
    - configuration

- name: Add an UEFI entry for the kernel {{ kernel }}
  # efibootmgr is installed on the Arch Linux image, so this does not need to be
  # run inside the chroot environment to work successfully. However, only run
  # the command if it has not been run previously, or errors will be thrown
  ansible.builtin.shell: # noqa no-changed-when
    cmd: |-
      efibootmgr \
        --create \
        --bootnum {{ ansible_loop.index0 + 10 }} \
        --disk /dev/{{ filesystems_physical_drives | first }} \
        --part 1 \
        --label "Arch Linux ({{ kernel }})" \
        --loader /EFI/Linux/{{ kernel }}.efi \
  when: |-
    not ansible_check_mode and
    check_kernel.stdout[0] == "0"
  tags:
    - kernel
    - efibootmgr
    - configuration
